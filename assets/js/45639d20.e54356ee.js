"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[292],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(i,".").concat(h)]||u[h]||p[h]||o;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7669:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(2848),r=n(9213),o=(n(9496),n(9613)),l=["components"],s={title:"Hardhat",sidebar_position:6},i="Getting Started with Hardhat",c={unversionedId:"interact/hardhat",id:"interact/hardhat",title:"Hardhat",description:"Introduction",source:"@site/docs/interact/hardhat.md",sourceDirName:"interact",slug:"/interact/hardhat",permalink:"/interact/hardhat",editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/interact/hardhat.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Hardhat",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Truffle",permalink:"/interact/truffle"},next:{title:"Verify a contract",permalink:"/interact/verify-contract"}},d={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Deploy ERC-20",id:"deploy-erc-20",level:2},{value:"Hardhat Tasks",id:"hardhat-tasks",level:2},{value:"ETH Balance",id:"eth-balance",level:3},{value:"Total Supply",id:"total-supply",level:3},{value:"Transfer ERC-20",id:"transfer-erc-20",level:3},{value:"BalanceOf ERC-20",id:"balanceof-erc-20",level:3},{value:"Approve ERC-20",id:"approve-erc-20",level:3},{value:"TransferFrom ERC-20",id:"transferfrom-erc-20",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started-with-hardhat"},"Getting Started with Hardhat"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/"},"Hardhat")," is yet another Ethereum development environment.\nIt is known for debugging the Solidity code and the explicit error messages.\nMoreover it has extra nice features such as the interactive JavaScript console\nand the user defined tasks."),(0,o.kt)("p",null,"The main objective of this tutorial is to show how to deploy and interact with\nthe Solidity smart contracts on Aurora using Hardhat. This tutorial assumes that\nyou are familiar with ",(0,o.kt)("inlineCode",{parentName:"p"},"Hardhat")," and the ERC-20 tokens. For more details about\nthe fungible token standard, please refer to\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20 Standard specification"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"This tutorial assumes that you have Node.js 12+ and Yarn. Please refer to\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/en/docs/install#mac-stable"},"Yarn installation how-to"),"\nif you don't yet have the yarn command installed locally."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To install the prerequisite packages, clone the examples repository:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/aurora-is-near/aurora-examples.git\ncd aurora-examples/hardhat/erc20/\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add your Aurora Private key (from MetaMask) to ",(0,o.kt)("strong",{parentName:"li"},".env")," file and\nthen run yarn : ",(0,o.kt)("br",null))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'echo "AURORA_PRIVATE_KEY=YOUR_AURORA_PRIVATE_KEY_HERE" >> .env\nyarn install\n')),(0,o.kt)("h2",{id:"deploy-erc-20"},"Deploy ERC-20"),(0,o.kt)("p",null,"The ERC-20 example is about a naive Watermelon token \ud83c\udf49. You can exchange\nthem into actual Watermelons \ud83c\udf49\ud83c\udf49\ud83c\udf49. The total supply is ",(0,o.kt)("inlineCode",{parentName:"p"},"1000000"),", the\nminter is the contract deployer address, and the decimals are ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"\n(One token --\x3e One watermelon)."),(0,o.kt)("p",null,"To deploy the ",(0,o.kt)("inlineCode",{parentName:"p"},"ERC-20")," token contract, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ make deploy NETWORK=testnet_aurora\nyarn hardat run scripts/deploy.js --network testnet_aurora\nyarn run v1.22.10\nDeploying contracts with the account: 0x6A33382de9f73B846878a57500d055B981229ac4\nAccount balance: 2210010200000000000\nWatermelonToken deployed to: 0xD7f2A76F5DA173043E6c61a0A18D835809A07766\n\u2728  Done in 14.96s.\n\n# export the token address\n$ export TOKEN_ADDRESS='YOUR OUTPUT FROM DEPLOY (e.g. 0xD7f2A76F5DA173043E6c61a0A18D835809A07766)'\n")),(0,o.kt)("h2",{id:"hardhat-tasks"},"Hardhat Tasks"),(0,o.kt)("p",null,"Hardhat tasks take care of parsing the values provided for each parameter.\nIt gets the values, performs the type validation and converts them into your desired type."),(0,o.kt)("p",null,"In this example, we will go through a set of pre-defined Hardhat tasks\nthat uses the Hardhat Runtime Environment (",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/advanced/hardhat-runtime-environment.html"},"HRE"),"). In order to complete the tutorial,\nyou should use them in the same order:"),(0,o.kt)("h3",{id:"eth-balance"},"ETH Balance"),(0,o.kt)("p",null,"The following Hardhat task uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"Web3")," plugin to get the account\u2019s balance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'task("balance", "Prints an account\'s balance")\n  .addParam("account", "The account\'s address")\n  .setAction(async taskArgs => {\n    const account = web3.utils.toChecksumAddress(taskArgs.account);\n    const balance = await web3.eth.getBalance(account);\n\n    console.log(web3.utils.fromWei(balance, "ether"), "ETH");\n  });\n')),(0,o.kt)("p",null,"To get the ",(0,o.kt)("inlineCode",{parentName:"p"},"ETH")," balance, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat balance --network testnet_aurora --account 0x6A33382de9f73B846878a57500d055B981229ac4\n2.2100102 ETH\n")),(0,o.kt)("p",null,"You should notice that ",(0,o.kt)("inlineCode",{parentName:"p"},"--network")," is a global built-in option (parameter)\nin Hardhat. We will use it for the following commands as well."),(0,o.kt)("h3",{id:"total-supply"},"Total Supply"),(0,o.kt)("p",null,"The following task script gets the total supply of the Watermelon ERC-20 token.\nFirst it attaches the\ntoken contract, gets the sender address and finally retrieves the total supply\nby calling ",(0,o.kt)("inlineCode",{parentName:"p"},"totalSupply()")," method in our ERC-20 contract. The ",(0,o.kt)("inlineCode",{parentName:"p"},"--token"),"\naddress is the ERC-20 contract address."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'task("totalSupply", "Total supply of ERC-20 token")\n.addParam("token", "Token address")\n.setAction(async function ({ token }, { ethers: { getSigners } }, runSuper) {\n  const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n  const watermelon = watermelonToken.attach(token)\n  const [minter] = await ethers.getSigners();\n  const totalSupply = (await (await watermelon.connect(minter)).totalSupply()).toNumber()\n  console.log(`Total Supply is ${totalSupply}`);\n});\n')),(0,o.kt)("p",null,"To get the ",(0,o.kt)("inlineCode",{parentName:"p"},"totalSupply"),", use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat totalSupply --token $TOKEN_ADDRESS --network testnet_aurora\nTotal Supply is 1000000\n")),(0,o.kt)("h3",{id:"transfer-erc-20"},"Transfer ERC-20"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," option allows anyone holding an ERC-20 tokens to transfer\nthem to any Ethereum address. In the following script, the minter address\nwill mint (implicitly) and transfer ",(0,o.kt)("inlineCode",{parentName:"p"},"10 WTM")," tokens to the ",(0,o.kt)("inlineCode",{parentName:"p"},"spender")," address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'task("transfer", "ERC-20 transfer")\n    .addParam("token", "Token address")\n    .addParam("spender", "Spender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, spender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [minter] = await ethers.getSigners();\n        await (await watermelon.connect(minter).transfer(spender, amount)).wait()\n        console.log(`${minter.address} has transferred ${amount} to ${spender}`);\n    });\n')),(0,o.kt)("p",null,"To call ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer"),", use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat transfer --token $TOKEN_ADDRESS --amount 10 --spender 0x2531a4D108619a20ACeE88C4354a50e9aC48ecfe --network testnet_aurora\n0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 has transferred 10 tokens to 0x2531a4D108619a20ACeE88C4354a50e9aC48ecfe\n")),(0,o.kt)("h3",{id:"balanceof-erc-20"},"BalanceOf ERC-20"),(0,o.kt)("p",null,"We can prove that the ",(0,o.kt)("inlineCode",{parentName:"p"},"spender")," has received the exact amount of tokens\nby calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"balanceOf")," as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'task("balanceOf", "Total supply of ERC-20 token")\n.addParam("token", "Token address")\n.addParam("account", "Account address")\n.setAction(async function ({ token, account }, { ethers: { getSigners } }, runSuper) {\n  const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n  const watermelon = watermelonToken.attach(token)\n  const [minter] = await ethers.getSigners();\n  const balance = (await (await watermelon.connect(minter)).balanceOf(account)).toNumber()\n  console.log(`Account ${account} has a total token balance:  ${balance} WTM`);\n});\n')),(0,o.kt)("p",null,"To get the ",(0,o.kt)("inlineCode",{parentName:"p"},"balance"),", use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx hardhat balanceOf --token $TOKEN_ADDRESS --account 0x6A33382de9f73B846878a57500d055B981229ac4 --network testnet_aurora\nAccount 0x6A33382de9f73B846878a57500d055B981229ac4 has a total token balance:  999970 WTM\n")),(0,o.kt)("h3",{id:"approve-erc-20"},"Approve ERC-20"),(0,o.kt)("p",null,"In some cases, instead of calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," directly, the sender\ncan approve a specific amount of tokens to be withdrawn from his account\nto specific recipient address later. This can be done by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"approve"),"\nthen calling ",(0,o.kt)("inlineCode",{parentName:"p"},"transferFrom"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'task("approve", "ERC-20 approve")\n    .addParam("token", "Token address")\n    .addParam("spender", "Spender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, spender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [sender] = await ethers.getSigners();\n        await (await watermelon.connect(sender).approve(spender, amount)).wait()\n        console.log(`${sender.address} has approved ${amount} tokens to ${spender}`);\n    });\n\nmodule.exports = {};\n')),(0,o.kt)("p",null,"To call ",(0,o.kt)("inlineCode",{parentName:"p"},"approve"),", use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat approve --token $TOKEN_ADDRESS --spender 0x8722C88e82AbCC639148Ab6128Cd63333B2Ad771 --amount 10 --network testnet_aurora\n0x6A33382de9f73B846878a57500d055B981229ac4 has approved 10 tokens to 0x8722C88e82AbCC639148Ab6128Cd63333B2Ad771\n")),(0,o.kt)("h3",{id:"transferfrom-erc-20"},"TransferFrom ERC-20"),(0,o.kt)("p",null,"After approving the tokens, a recipient can call ",(0,o.kt)("inlineCode",{parentName:"p"},"transferFrom")," to move\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"allowance")," to his account.  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'task("transferFrom", "ERC-20 transferFrom")\n    .addParam("token", "Token address")\n    .addParam("sender", "Sender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, sender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [recipient] = await ethers.getSigners()\n        console.log(recipient.address);\n        await (await watermelon.connect(recipient).transferFrom(sender, recipient.address, amount)).wait()\n        console.log(`${recipient.address} has received ${amount} tokens from ${sender}`)\n    });\n')),(0,o.kt)("p",null,"To call ",(0,o.kt)("inlineCode",{parentName:"p"},"transferFrom"),", use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# export the recipient private key\nAURORA_PRIVATE_KEY="THE RECIPIENT PRIVATE KEY" npx hardhat transferFrom --token $TOKEN_ADDRESS --sender 0x6A33382de9f73B846878a57500d055B981229ac4  --amount 10 --network testnet_aurora\n0x8722C88e82AbCC639148Ab6128Cd63333B2Ad771 has received 10 tokens from 0x6A33382de9f73B846878a57500d055B981229ac4\n')),(0,o.kt)("p",null,"Checking the balance of ",(0,o.kt)("inlineCode",{parentName:"p"},"0x8722C88e82AbCC639148Ab6128Cd63333B2Ad771"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat balanceOf --token $TOKEN_ADDRESS --account 0x8722C88e82AbCC639148Ab6128Cd63333B2Ad771  --network testnet_aurora\nAccount 0x8722C88e82AbCC639148Ab6128Cd63333B2Ad771 has a total token balance:  10 WTM\n")),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"In this tutorial we deployed an ERC-20 token using Hardhat on the Aurora\nTestnet, transferred, and approved ERC-20 tokens. Moreover, we added other\nutility tasks such as getting the total supply, and the account balance.\nThe only difference is we changed the Ethereum Mainnet to the Aurora\nRPC endpoint."))}h.isMDXComponent=!0}}]);