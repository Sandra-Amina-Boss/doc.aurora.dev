"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[1861],{9613:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>h});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(h,i(i({ref:t},l),{},{components:a})):n.createElement(h,i({ref:t},l))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6469:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(1163),r=(a(9496),a(9613));const o={sidebar_label:"Usage examples",title:"Usage Examples"},i=void 0,s={unversionedId:"xcc/near-to-aurora/usage-examples",id:"xcc/near-to-aurora/usage-examples",title:"Usage Examples",description:"Calling Uniswap from Near",source:"@site/docs/xcc/near-to-aurora/usage-examples.md",sourceDirName:"xcc/near-to-aurora",slug:"/xcc/near-to-aurora/usage-examples",permalink:"/xcc/near-to-aurora/usage-examples",draft:!1,editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/xcc/near-to-aurora/usage-examples.md",tags:[],version:"current",frontMatter:{sidebar_label:"Usage examples",title:"Usage Examples"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/xcc/near-to-aurora/introduction"},next:{title:"Introduction",permalink:"/onboard/introduction"}},c={},p=[{value:"Calling Uniswap from Near",id:"calling-uniswap-from-near",level:2},{value:"Note for developers: workspace organization",id:"note-for-developers-workspace-organization",level:3}],l={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"calling-uniswap-from-near"},"Calling Uniswap from Near"),(0,r.kt)("p",null,"This is an example of a Near contract interacting with an EVM contract deployed on Aurora.\nIn this case the EVM contract is ",(0,r.kt)("a",{parentName:"p",href:"https://docs.uniswap.org/contracts/v3/overview"},"Uniswap V3"),".\nThe full Uniswap API is complex, so this example only implements one function to illustrate the pattern.\nThe function implemented in this Near contract is ",(0,r.kt)("a",{parentName:"p",href:"https://docs.uniswap.org/contracts/v3/reference/periphery/SwapRouter#exactoutputsingle"},"exactOutputSingle"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"exactOutputSingle"),' function is used to perform a token swap using a single liquidity pool where the swap is constrained to give an exact amount of the "output"\ntoken within some price limitation of the "input" token.\nThe return value of ',(0,r.kt)("inlineCode",{parentName:"p"},"exactOutputSingle")," is the amount of input token spent to make the swap."),(0,r.kt)("p",null,"The Near contract works as a proxy with a method called ",(0,r.kt)("inlineCode",{parentName:"p"},"exact_output_single")," that takes the same input as Uniswap's ",(0,r.kt)("inlineCode",{parentName:"p"},"exactOutputSingle"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"exact_output_single")," function returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," because under the hood it is making a Near cross-contract call to the Aurora EVM where the Uniswap code is deployed.\nThis contract attaches a callback to the promise so that it can interpret the output obtained from Aurora and present it in a more Near-friendly way (i.e. encoding it JSON instead of a binary format)."),(0,r.kt)("p",null,'This contract must own the assets it is using to swap inside the EVM.\nTherefore a prerequisite to using this contract is to transfer assets to its EVM "implicit address".\nSee the main documentation in ',(0,r.kt)("inlineCode",{parentName:"p"},"docs/AuroraFromNear.md")," for more information about this concept."),(0,r.kt)("h3",{id:"note-for-developers-workspace-organization"},"Note for developers: workspace organization"),(0,r.kt)("p",null,"This example is organized into two crates: the contract that would be deployed to a Near network, and a crate for integration testing of the contract.\nThis layout was chosen as opposed to making the integration tests part of a ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch11-03-test-organization.html#the-tests-directory"},"tests directory"),"\nin the contract crate because the purpose of the integration tests is to test the compiled Wasm (i.e. binary) artifact of the contract as opposed to testing it as a Rust library.\nMy understanding of the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch11-03-test-organization.html#integration-tests-for-binary-crates"},"note in the Rust book about the tests directory"),"\nis that it is meant for testing library integrations as opposed to binary integrations.\nThus I chose to factor the integration tests out as an entirely separate crate.\nYou may or may not make a different choice in your own projects, and that's ok."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"}," /// Proxy for [exactOutputSingle](https://docs.uniswap.org/contracts/v3/reference/periphery/SwapRouter#exactoutputsingle).\n    /// Calls the `exact_output_single` function of a Uniswap router contract deployed on Aurora.\n    pub fn exact_output_single(&self, params: SerializableExactOutputSingleParams) -> Promise {\n        let params: ExactOutputSingleParams = params.try_into().unwrap();\n        let evm_token = ethabi::Token::Tuple(vec![\n            ethabi::Token::Address(params.token_in.raw()),\n            ethabi::Token::Address(params.token_out.raw()),\n            ethabi::Token::Uint(params.fee.into()),\n            ethabi::Token::Address(params.recipient.raw()),\n            ethabi::Token::Uint(params.deadline),\n            ethabi::Token::Uint(params.amount_out),\n            ethabi::Token::Uint(params.amount_in_max),\n            ethabi::Token::Uint(params.price_limit),\n        ]);\n        let evm_input = ethabi::encode(&[evm_token]);\n        let aurora_call_args = CallArgs::V1(FunctionCallArgsV1 {\n            contract: self.uniswap,\n            input: [\n                EXACT_OUTPUT_SINGLE_SELECTOR.as_slice(),\n                evm_input.as_slice(),\n            ]\n            .concat(),\n        });\n        aurora_sdk::aurora_contract::ext(self.aurora.clone())\n            .with_unused_gas_weight(3)\n            .call(aurora_call_args)\n            .then(Self::ext(env::current_account_id()).parse_exact_output_single_result())\n    }\n")),(0,r.kt)("p",null,"You can find the full repo of this example on the GitHub ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aurora-is-near/aurora-contracts-sdk/tree/main/examples/uniswap-from-near"},"here"),"."))}m.isMDXComponent=!0}}]);